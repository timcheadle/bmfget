#!/usr/bin/perl

use Getopt::Long;
use MP3::Info;

# Check command line arguments
GetOptions(
	'u=s' => \$playlistURL,
	'f=s' => \$playlistFile,
	'v'   => \$verbose
);
if (!($playlistURL xor $playlistFile)) {
	die
		"Usage: $0 [-v] <-f playlisti | -u url>\n\n".
		"    -v         Verbose wget output (turns error detection off)\n".
		"    -f file    Use file as the playlist to parse\n".
		"    -u url     Download and parse playlist from url\n\n".
		"    Either the file or url must be specified, but not both.\n\n";
}

# If a URL was specified, download and format it
if ($playlistURL) {
	# Check URL syntax
	if ($playlistURL !~ /http:\/\/\S+\//) {
		die "Invalid URL: $playlistURL\n\n";
	}

	# Format the URL to not confuse the shell
	$playlistFile = $playlistURL;
	$playlistURL =~ s/&/\\&/g;

	# Get the filename to expect to have downloaded
	$playlistFile =~ s/.*\///g;

	# Now download the playlist, removing any previous ones of the same name
	print "Downloading playlist...\n";
	`rm $playlistFile` if (-e $playlistFile);
	if (!$verbose) {
		`wget --progress=bar -t3 $playlistURL 2>&1`;
	} else {
		`wget --progress=bar -t3 $playlistURL`;
	}
}

# Open the playlist and parse it
print "Parsing playlist...\n";
open(PLAYLIST, $playlistFile) or die "Cannot open $playlistFile: $!\n\n";
while(<PLAYLIST>) {
	chomp;
	my $line = $_;

	# Skip blank and header lines
	next if (/#EXTM3U/);
	next if (/^\s+/);

	# Now parse the EXTINF lines
	my ($time, $artist, $album, $title, $trackNum, $url, $urlFile, $newFile, $minutes, $seconds);
	if (/^#EXTINF:(\d+),([^:]*):\s*(\d+)\.\s+(.*)/) {
		$time = $1;
		$album = $2;
		$trackNum = $3;
		$title = $4;

		# Get the URL from the next line
		$url = <PLAYLIST>;
		chomp $url;

		# If the URL is blank, something is wrong so skip this entry
		next if !$url;

		# Now format the filename from the url
		$urlFile = $url;
		$urlFile =~ s/.*\///g;	# Remove leading directories and hostname
		
		# Format the url to not confuse the shell
		$url =~ s/&/\\&/g;

		# Now format the title and album
		$artist = $album;
		$artist =~ s/,.*//g;
		$artist =~ s/^\s+//g;
		$artist =~ s/\// /g;
		
		$album =~ s/.*,//;
		$album =~ s/^\s+//;
		$album =~ s/\// /g;

		$title =~ s/^\s+//;
		$title =~ s/\s+\*bmf\*\s*//g;
		$title =~ s/\// /g;

		$fileNum = $trackNum;
		$fileNum = "0$fileNum" if ($fileNum < 10);

		# Now figure out the time in MM:SS
		use integer;
		$minutes = $time / 60;
		no integer;
		$seconds = $time % 60;
		$seconds = "0$seconds" if $seconds < 10;
		
		# Format the proper filename with escaped spaces
		$newFile = "$artist/$album/$fileNum. $title.mp3";
		
		# Print a status for each song
		print "-------------------------------------------------------------\n";
		print "  Time: $minutes:$seconds ($time sec)\n";
		print " Track: $trackNum\n";
		print "Artist: $artist\n";
		print " Album: $album\n";
		print " Title: $title\n";
		print "   URL: $url\n";
		print "  File: $urlFile\n";
		print "SaveAs: $newFile\n";
		print "\n";
		
		# Now wget the file
		if (-e $urlFile) {
			unlink($urlFile) or die "Cannot delete previos $urlFile: $!\n\n";
		}

		# If verbose output is turned off, wget the mp3 and do error detection
		if (!$verbose) {
			my $wgetOutput = `wget -t3 $url 2>&1`;

			# Check wget output to see if file actually downloaded (if saved bytes = total bytes)
			my $wgetSuccess = 0;
			if ($wgetOutput =~ /saved \[(\d+)\/(\d+)\]/) {
				if ($1 == $2) {
					$wgetSuccess = 1;
					print "Successfully downloaded $1 of $2 bytes.\n\n";
				} else {
					print "ERROR!  Downloaded $1 bytes out of $2.\n\n";
				}
			} else {
				print "ERROR!  Failure.  Downloaded ", (-s $urlFile), " bytes.\n\n";
			}
		# Otherwise, just wget the file and print all the output
		} else {
			`wget --progress=bar -t3 $url`;
		}

		# If we got some or all of the song, add the ID3 tag, rename the file
		# and put it into the right directory
		if (-e $urlFile && -s $urlFile) {
			# Add the ID3 tag
			set_mp3tag($urlFile, $title, $artist, $album, '', '', '', $trackNum);
			
			# Now make the proper directories
			mkdir($artist);
			mkdir("$artist/$album");

			# Rename the file and move
			rename($urlFile, $newFile) or die "Cannot rename $urlFile to \"$newFile\": $!\n\n";;

			# Increment the song count
			$songCount++;
		}

		# If for some reason wget failed, push the song into the error list
		if (!$wgetSuccess) {
			# Add song to the error list
			push(@errorList, $newFile);
		}
	}
}
close(PLAYLIST);

unlink($playlistFile) or print "Could not delete $playlistFile: $!\n\n";

print "Downloaded $songCount songs.\n\n";
if (@errorList != 0) {
	print "The following songs contained errors:\n";
	print join("\n", @errorList);
	print "\n\n";
}
